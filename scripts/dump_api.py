
import tc
import types

TAB_WIDTH = 4

star_border = '*' * 80
line_border = '-' * 80
tab = ' ' * TAB_WIDTH


def indented_border(ntabs, char='*'):
    head = ntabs * tab
    tail = char * (80 - (ntabs * TAB_WIDTH))
    return head + tail


def wrap_text(text, width, indent):
    assert indent < width
    ret = ''
    read = 0
    while read < len(text):
        line_chars = 0
        while line_chars < indent:
            ret += ' '
            line_chars += 1
        while line_chars < width and read < len(text):
            ret += text[read]
            line_chars += 1
            read += 1
            if text[read - 1] == '\n':
                break
        if read < len(text):
            last_space_idx = read - 1
            while not text[last_space_idx].isspace():
                last_space_idx -= 1
            assert text[last_space_idx].isspace()
            trimmed = read - last_space_idx
            ret = ret[:-trimmed]
            read -= (trimmed-1)
            ret += '\n'
    return ret


print star_border
print "Permafrost Engine Python API documentation"
print "Module: {0}".format(tc.__name__)
print star_border
print
print "This file is generated by the script: {0}.".format(__file__)
print "Use this script as the engine argument to generate up-to-date API documentation."
print
print star_border
print "BUILT-IN FUNCTIONS"
print star_border
print

for func in [getattr(tc, attr) for attr in dir(tc) if isinstance(getattr(tc, attr), types.BuiltinFunctionType)]:
    print tab + "[{0}]".format(func.__name__)
    print indented_border(1, char='-')
    print "{0}".format(wrap_text(func.__doc__, 80, 1 * TAB_WIDTH))
    print

print star_border
print "BUILT-IN CLASSES"
print star_border
print

for cls in [getattr(tc, attr) for attr in dir(tc) if isinstance(getattr(tc, attr), types.TypeType)]:
    print tab + "[{0}]".format(cls.__name__)
    print indented_border(1, char='-')
    print "{0}".format(wrap_text(cls.__doc__, 80, 1 * TAB_WIDTH))
    print

    fields = [getattr(cls, attr) for attr in dir(cls) if isinstance(getattr(cls, attr), types.MemberDescriptorType)
              or isinstance(getattr(cls, attr), types.GetSetDescriptorType)]
    if len(fields) > 0:
        print indented_border(2, char='*')
        print 2*tab + "MEMBERS"
        print indented_border(2, char='*')
    for field in fields:
        print 2*tab + "[{0}]".format(field.__name__)
        print "{0}".format(wrap_text(field.__doc__, 80, 2 * TAB_WIDTH))
        print

    methods = [getattr(cls, attr) for attr in dir(cls) if callable(getattr(cls, attr))
               and attr not in dir(object)
               and not isinstance(getattr(cls, attr), types.BuiltinMethodType)]

    if len(methods) > 0:
        print indented_border(2, char='*')
        print 2*tab + "METHODS"
        print indented_border(2, char='*')
    for method in methods:
        print 2*tab + "[{0}]".format(method.__name__)
        print "{0}".format(wrap_text(method.__doc__, 80, 2 * TAB_WIDTH))
        print

print star_border
print "BUILT-IN CONSTANTS"
print star_border
print

for const in [attr for attr in dir(tc) if (isinstance(getattr(tc, attr), types.IntType)
                                           or isinstance(getattr(tc, attr), types.LongType)
                                           or isinstance(getattr(tc, attr), types.FloatType)
                                           or isinstance(getattr(tc, attr), types.StringType)
                                           or isinstance(getattr(tc, attr), types.UnicodeType))
              and not attr.startswith('__')]:
    print(tab + "{0} {1}".format(const, getattr(tc, const)))


def on_tick(user, event):
    tc.global_event(tc.SDL_QUIT, None)


tc.register_event_handler(tc.EVENT_UPDATE_START, on_tick, None)
